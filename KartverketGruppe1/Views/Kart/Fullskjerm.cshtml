@model KartverketGruppe1.Data.Innmelding
@{
    ViewData["Title"] = "Innmelding";
}
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<style>
    html, body {
        margin: 0;
        padding: 0;
        height: 100%;
        overflow: hidden; 
    }
    #map {
        width: 100%;
        height: 100%;
    }

    .map-container {
        /* display: flex;
        /* height: calc(100vh - 60px);  Justert for navbar */
        /* height: 100vh;
        width: 100%;
        position: flex;
        top: 60px;
        left: 0; */ 
        position: fixed; /* Endret fra absolute til fixed */
        top: 60px;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        width: 100%;
        height: calc(100vh - 60px); /* Justert høyde */
        overflow: hidden; /* Hindre scrolling i container */
    }

    .layer-control {
        position: absolute;
        right: 10px;
        top: 10px;
        z-index: 1000;
        background: white;
        padding: 10px;
        border-radius: 4px;
        box-shadow: 0 2px 6px rgba(0,0,0,0.1);
    }

    .layer-btn {
        padding: 8px 16px;
        margin: 4px;
        border: 1px solid #ccc;
        border-radius: 4px;
        background: white;
        cursor: pointer;
    }

        .layer-btn.active {
            background: #4a90e2;
            color: white;
            border-color: #357abd;
        }
</style>


@* <div class="map-container">
        <div id="map"></div>
</div>
 *@
<div class="map-container">
    <div class="layer-control">
        <button class="layer-btn active" data-layer="topo">Topografisk</button>
        <button class="layer-btn" data-layer="raster">Raster</button>
        <button class="layer-btn" data-layer="graatone">Gråtone</button>
    </div>
    <div id="map"></div>
</div>







<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script>



    // Initialiser kartet
    var map = L.map('map');

    // Legg til kartlag
    // L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
    //     maxZoom: 18,
    //     attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
    // }).addTo(map);


    // Henter forskjellige kartgrunnlag fra kartverket
    var mapLayers = {
        topo: L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topo/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
        }),
        raster: L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/toporaster/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
        }),
        graatone: L.tileLayer('https://cache.kartverket.no/v1/wmts/1.0.0/topograatone/default/webmercator/{z}/{y}/{x}.png', {
            maxZoom: 18,
            attribution: '&copy; <a href="http://www.kartverket.no/">Kartverket</a>'
        })
    };

    // Bruker topo som standard
    var currentLayer = mapLayers.topo;
    currentLayer.addTo(map);

    // Laster inn nytt kartgrunnlag og fjerner det gamle
    document.querySelectorAll('.layer-btn').forEach(button => {
        button.addEventListener('click', function () {
            const layerName = this.getAttribute('data-layer');

            map.removeLayer(currentLayer);

            currentLayer = mapLayers[layerName];
            map.addLayer(currentLayer);

            document.querySelectorAll('.layer-btn').forEach(btn => btn.classList.remove('active'));
            this.classList.add('active');
        });
    });
















    // Funksjon for å tegne geometri basert på type
    function drawGeometry() {
        const geometryType = '@Model.Koordinat.GeometryType';
        const coordinates = JSON.parse('@Html.Raw(Model.Koordinat.Koordinater)');
        let geometry;

        switch (geometryType) {
            case 'Point':
                geometry = L.marker([coordinates.lat, coordinates.lng])
                    .addTo(map)
                    .bindPopup(
                        `<strong>@Model.Avvikstype.Type</strong><br>
                        Status: @Model.Status.Statustype<br>
                        Dato: @Model.Dato.ToString("dd.MM.yyyy")`
                    );
                break;

            case 'LineString':
                geometry = L.polyline(coordinates)
                    .addTo(map)
                    .bindPopup(
                        `<strong>@Model.Avvikstype.Type</strong><br>
                        Status: @Model.Status.Statustype<br>
                        Dato: @Model.Dato.ToString("dd.MM.yyyy")`
                    );
                break;

            case 'Polygon':
                geometry = L.polygon(coordinates)
                    .addTo(map)
                    .bindPopup(
                        `<strong>@Model.Avvikstype.Type</strong><br>
                        Status: @Model.Status.Statustype<br>
                        Dato: @Model.Dato.ToString("dd.MM.yyyy")`
                    );
                break;
        }

        // Zoom kartet til å vise hele geometrien
        if (geometry) {
            if (geometryType === 'Point') {
                map.setView([coordinates.lat, coordinates.lng], 13); // Standard på punkter
            } else {
                map.fitBounds(geometry.getBounds());
            }
        }
    }

    // Sett inn markeringen i kartet
    drawGeometry();



    function RedirectToOversikt() {
        window.location.href = "/Home/InnmeldOversikt";
    }



</script>